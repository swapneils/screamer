#+title: Screamer - A Nondeterministic Programming Library

Screamer is an extension of Common Lisp that adds support for nondeterministic
programming.

Screamer consists of two levels. The basic nondeterministic level adds support
for backtracking and undoable side effects. On top of this nondeterministic
substrate, Screamer provides a comprehensive constraint programming language in
which one can formulate and solve mixed systems of numeric and symbolic
constraints.

Together, these two levels augment Common Lisp with practically all of the
functionality of both Prolog and constraint logic programming languages such as
CHiP and CLP(R).

Furthermore, Screamer is fully integrated with Common Lisp. Screamer programs
can coexist and interoperate with other extensions such as CLIM and Iterate.

In several ways Screamer is more efficient than other implementations of
backtracking languages.

First, Screamer code is transformed into Common Lisp which can be compiled by
the underlying Common Lisp system. Many competing implementations of
nondeterministic Lisp are interpreters and thus are far less efficient than
Screamer.

Second, the backtracking primitives require fairly low overhead in Screamer.

Finally, this overhead to support backtracking is only paid for by those
portions of the program which use the backtracking primitives. Deterministic
portions of user programs pass through the Screamer-to-Common-Lisp
transformation unchanged. Since in practise, only small portions of typical
programs utilize the backtracking primitives, Screamer can produce more
efficient code than compilers for languages in which backtracking is more
pervasive.

Screamer was originally written by Jeffrey Mark Siskind and David Allen McAllester,
see file LICENSE for licensing information (1-clause MIT License).

* Changes
See CHANGELOG.org
** Incompatible changes from Screamer 4 to Screamer 5
- The arglist of ~ith-value~ has changed, moving the ~i~ and ~default~ inputs
  to the first input of the form and making the remainder of the form a list.
  - Current arglist: ~((i &key (default '(fail))) &body body)~
  - See the docstring for more details on this form's behavior.
- Multiple new symbols exported from the ~screamer~ package
* Examples
See http://nikodemus.github.io/screamer/ for some examples of the core Screamer
functionality.
